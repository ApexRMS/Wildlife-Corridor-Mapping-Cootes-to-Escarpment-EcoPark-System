library(tidyverse)
library(raster)
projectDir <- "C:/Users/bronw/Documents/Apex/Projects/Active/A233_RBGConnectivity/a233"
dataDir <- file.path(projectDir, "Data/Raw")
outDir <- file.path(projectDir, "Data/Processed")
# Input parameters
polygonBufferWidth <- 20 # In km
# Read in data
# Combined LULC layers
LULC <- raster(file.path(outDir, paste0("LULC_", polygonBufferWidth, "km_buffered.tif")))
LULC_unbuffered <- raster(file.path(outDir, paste0("LULC_", polygonBufferWidth, "km_unbuffered.tif")))
library(tidyverse)
library(raster)
# Settings
options(stringsAsFactors=FALSE, SHAPE_RESTORE_SHX=T, useFancyQuotes = F, digits=10)
# Directories
projectDir <- "C:/Users/bronw/Documents/Apex/Projects/Active/A233_RBGConnectivity/a233"
dataDir <- file.path(projectDir, "Data/Raw")
outDir <- file.path(projectDir, "Data/Processed")
# Input parameters
polygonBufferWidth <- 20 # In km
# Read in data
# Combined LULC layers
LULC <- raster(file.path(outDir, paste0("LULC_", polygonBufferWidth, "km_buffered.tif")))
LULC_unbuffered <- raster(file.path(outDir, paste0("LULC_", polygonBufferWidth, "km_unbuffered.tif")))
# Resistance crosswalk
crosswalk <- read_csv(file.path(paste0(dataDir, "/Resistance"), "ResistanceCrosswalk.csv"))
# Create resistance layer  ---------------------------------------------------------
# Reclassify
resistance <- LULC %>%
reclassify(., rcl=crosswalk[, c("Destination_ID", "Resistance")])
resistance_unbuffered <- LULC_unbuffered %>%
reclassify(., rcl=crosswalk[, c("Destination_ID", "Resistance")])
# Save outputs ---------------------------------------------------------
writeRaster(resistance, file.path(outDir, paste0("Resistance_buffer", polygonBufferWidth, "km_buffered.tif")))
writeRaster(resistance_unbuffered, file.path(outDir, paste0("Resistance_buffer", polygonBufferWidth, "km_unbuffered.asc")))
# Create binary study area raster
studyArea <- resistance
studyArea[studyArea>0] <- 1
x11(); plot(studyArea)
# Create binary study area raster
studyArea <- resistance
studyArea[studyArea>0] <- 0
studyArea <- resistance
studyArea[studyArea>0] <- 1
boundary <- boundaries(studyArea)
x11(); plot(boundary)
boundary <- boundaries(studyArea, type='inner', directions=8, asNA=T)
focalNodes <- sampleRandom(boundary, 100)
x11(); plot(focalNodes)
boundary <- boundaries(studyArea, type='inner', directions=8, asNA=T, asRaster=T)
boundary <- boundaries(studyArea, type='inner', directions=8, asNA=T)
focalNodes <- sampleRandom(boundary, size=100, asRaster=T)
x11(); plot(focalNodes)
focalNodes <- sampleRandom(boundary, size=10000, asRaster=T)
x11(); plot(focalNodes)
focalNodes <- sampleRandom(boundary, size=1000, asRaster=T)
writeRaster(focalNodes, file.path(outDir, paste0("FocalNode_try_", polygonBufferWidth, "km_buffered.tif")), overwrite=T)
file.path(outDir, paste0("FocalNode_try_", polygonBufferWidth, "km_buffered.tif"))
focalNodes1 <- sampleRandom(boundary, size=100, asRaster=T)
writeRaster(focalNodes1, file.path(outDir, paste0("FocalNode_try1_", polygonBufferWidth, "km_buffered.tif")), overwrite=T)
writeRaster(focalNodes1, file.path(outDir, paste0("FocalNode_try_", polygonBufferWidth, "km_buffered.asc")), overwrite=T)
writeRaster(focalNodes, file.path(outDir, paste0("FocalNode_try100_", polygonBufferWidth, "km_buffered.asc")), overwrite=T)
#####################################################################
# a233 Royal Botanical Gardens Wildlife Corridor Mapping            #
# Create resistance surface                                         #
#                                                                   #
# Inputs:                                                           #
#    - The combined LULC layer produced by 1_StudyAreaLULC.R        #                                                                       #
#    - The LULC/resistance crosswalk                                #
# Outputs:                                                          #
#    - Resistance layer                                             #
#                                                                   #
# Script created by Bronwyn Rayfield and ChloÃ© Debeyser for ApexRMS #
#####################################################################
# Workspace ---------------------------------------------------------
# Packages
library(tidyverse)
library(raster)
# Settings
options(stringsAsFactors=FALSE, SHAPE_RESTORE_SHX=T, useFancyQuotes = F, digits=10)
# Directories
projectDir <- "C:/Users/bronw/Documents/Apex/Projects/Active/A233_RBGConnectivity/a233"
dataDir <- file.path(projectDir, "Data/Raw")
outDir <- file.path(projectDir, "Data/Processed")
# Input parameters
polygonBufferWidth <- 20 # In km
# Read in data
# Combined LULC layers
LULC <- raster(file.path(outDir, paste0("LULC_", polygonBufferWidth, "km_buffered.tif")))
LULC_unbuffered <- raster(file.path(outDir, paste0("LULC_", polygonBufferWidth, "km_unbuffered.tif")))
# Resistance crosswalk
crosswalk <- read_csv(file.path(paste0(dataDir, "/Resistance"), "ResistanceCrosswalk.csv"))
# Create resistance layer  ---------------------------------------------------------
# Reclassify
resistance <- LULC %>%
reclassify(., rcl=crosswalk[, c("Destination_ID", "Resistance")])
resistance_unbuffered <- LULC_unbuffered %>%
reclassify(., rcl=crosswalk[, c("Destination_ID", "Resistance")])
# Save outputs ---------------------------------------------------------
writeRaster(resistance, file.path(outDir, paste0("Resistance_buffer", polygonBufferWidth, "km_buffered.asc")))
focalNodes100 <- sampleRandom(boundary, size=100, asRaster=T)
focalNodesID100 <- clump(focalNodes100)
unique(focalNodesID100)
length(unique(focalNodesID100))
unique(focalNodes100)
focalNodes150 <- sampleRandom(boundary, size=150, asRaster=T)
focalNodesID150 <- clump(focalNodes150)
focalNodes50 <- sampleRandom(boundary, size=50, asRaster=T)
focalNodesID50 <- clump(focalNodes50)
unique(focalNodesID50)
writeRaster(focalNodes, file.path(outDir, paste0("FocalNode_try50_", polygonBufferWidth, "km_buffered.asc")), overwrite=T)
writeRaster(focalNodesID50, file.path(outDir, paste0("FocalNode_try50_", polygonBufferWidth, "km_buffered.asc")), overwrite=T)
focalNodes10 <- sampleRandom(boundary, size=10, asRaster=T)
focalNodesID10 <- clump(focalNodes10)
writeRaster(focalNodesID10, file.path(outDir, paste0("FocalNode_try10_", polygonBufferWidth, "km_buffered.asc")), overwrite=T)
unique(focalNodesID10)
focalNodes5 <- sampleRandom(boundary, size=5, asRaster=T)
focalNodesID5 <- clump(focalNodes5)
writeRaster(focalNodesID5, file.path(outDir, paste0("FocalNode_try5_", polygonBufferWidth, "km_buffered.asc")), overwrite=T)
writeRaster(resistance, file.path(outDir, paste0("Resistance_buffer", polygonBufferWidth, "km_buffered.tif")))
writeRaster(resistance_unbuffered, file.path(outDir, paste0("Resistance_buffer", polygonBufferWidth, "km_unbuffered.tif")))
# Save outputs ---------------------------------------------------------
#geotif
writeRaster(resistance, file.path(outDir, paste0("Resistance_buffer", polygonBufferWidth, "km_buffered.tif")), overwrite=TRUE)
# Packages
library(tidyverse)
library(sf)
library(raster)
# Directories
projectDir <- "C:/Users/bronw/Documents/Apex/Projects/Active/A233_RBGConnectivity/a233"
dataDir <- file.path(projectDir, "Data/Raw")
outDir <- file.path(projectDir, "Data/Processed")
dataDir <- file.path(projectDir, "Data/Processed")
resultsDir <- file.path(projectDir, "Results")
currMap <- raster(file.path(resultsDir,"try_cum_curmap.tif"))
currMap_unbuffered <- currMap %>%
crop(., extent(studyArea), snap="out") %>% # Crop to study area extent
mask(., mask=studyArea) %>% # Clip to study area
trim(.)
writeRaster(currMap_unbuffered, file.path(resultsDir,"try_cum_curmap_unbufferred.tif"))
crs(currMap) <- crs(studyArea)
# Crop to study area
currMap_unbuffered <- currMap %>%
crop(., extent(studyArea), snap="out") %>% # Crop to study area extent
mask(., mask=studyArea) %>% # Clip to study area
trim(.)
writeRaster(currMap_unbuffered, file.path(resultsDir,"try_cum_curmap_unbufferred.tif"), overwrite=TRUE
)
logcurrMap_unbuffered <- log(currMap_unbuffered)
writeRaster(logcurrMap_unbuffered, file.path(resultsDir,"try_cum_curmap_unbufferred_log.tif"), overwrite=TRUE)
writeRaster(currMap, file.path(resultsDir,"try_cum_curmap_bufferred.tif"), overwrite=TRUE)
writeRaster(logcurrMap, file.path(resultsDir,"try_cum_curmap_bufferred_log.tif"), overwrite=TRUE)
crs(currMap) <- crs(studyArea)
logcurrMap <- log(currMap)
# Crop to study area
currMap_unbuffered <- currMap %>%
crop(., extent(studyArea), snap="out") %>% # Crop to study area extent
mask(., mask=studyArea) %>% # Clip to study area
trim(.)
logcurrMap_unbuffered <- logcurrMap %>%
crop(., extent(studyArea), snap="out") %>% # Crop to study area extent
mask(., mask=studyArea) %>% # Clip to study area
trim(.)
writeRaster(currMap, file.path(resultsDir,"try_cum_curmap_bufferred.tif"), overwrite=TRUE)
writeRaster(logcurrMap, file.path(resultsDir,"try_cum_curmap_bufferred_log.tif"), overwrite=TRUE)
writeRaster(currMap_unbuffered, file.path(resultsDir,"try_cum_curmap_unbufferred.tif"), overwrite=TRUE)
writeRaster(logcurrMap_unbuffered, file.path(resultsDir,"try_cum_curmap_unbufferred_log.tif"), overwrite=TRUE)
x11(); plot(studyArea)
x11(); plot(currMap)
x11(); plot(currMap_unbuffered)
# Read in data
studyArea <- st_read(file.path(dataDir, paste0("studyarea_", polygonBufferWidth, "km_unbuffered.shp")))
currMap_unbuffered <- currMap %>%
crop(., extent(studyArea), snap="out") %>% # Crop to study area extent
mask(., mask=studyArea) %>% # Clip to study area
trim(.)
x11(); plot(currMap_unbuffered)
logcurrMap_unbuffered <- logcurrMap %>%
crop(., extent(studyArea), snap="out") %>% # Crop to study area extent
mask(., mask=studyArea) %>% # Clip to study area
trim(.)
writeRaster(currMap_unbuffered, file.path(resultsDir,"try_cum_curmap_unbufferred.tif"), overwrite=TRUE)
writeRaster(logcurrMap_unbuffered, file.path(resultsDir,"try_cum_curmap_unbufferred_log.tif"), overwrite=TRUE)
